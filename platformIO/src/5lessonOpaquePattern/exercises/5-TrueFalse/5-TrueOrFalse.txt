1.1 Memory allocated on the heap persists across function calls until it is explicitly deallocated. -> True 
- This is because the heap is a region of memory that is used for dynamic memory allocation, and the memory allocated 
on the heap is not automatically freed when the function that allocated it returns. Instead, the memory remains allocated 
until it is explicitly freed using the free() function or until the program terminates.

1.2 Repeatedly allocating large amounts of memory using alloca or deep recursion can result in a stack overflow. -> True
- This is because both alloca and deep recursion increase the stack usage by allocating memory on the stack. The stack has 
a limited size, and if the memory requirements exceed this limit, a stack overflow occurs.

1.3 If memory is allocated using malloc and is not subsequently deallocated using free, it results in a memory leak. -> True
- Memory leaks occur when dynamically allocated memory is not released back to the system after it is no longer needed. 
This can lead to a gradual reduction in available memory, potentially causing the system to run out of memory if the leaks accumulate over time.

1.4 Local variables are stored in the heap -> False 
- When a function is invoked, an activation record is created and pushed onto the execution stack. This activation record contains 
information about the function's execution context, including its local variables. Therefore, local variables are stored inside the activation 
record of the function, which is further stored in the call stack of the program. This is why when a function goes out of scope, all its local 
variables also go out of scope as the activation record of that function is popped out of the stack.

1.5 Memory allocated using malloc is automatically initialized to zero. -> False
- When you allocate memory using malloc, the memory block is allocated, but it is not initialized. This means that the memory 
block contains whatever data was previously in that memory location, which could be anything and is not guaranteed to be zero. 
If you need the allocated memory to be initialized to zero, you should use calloc instead, which allocates memory and initializes
all bytes in the allocated storage to zero

1.6 The stack size is determined at run time -> False
- The stack size is determined at compile time or can be set by the operating system or the user before the program is executed. 
The stack is a region of memory that is allocated for each thread of execution in a program, and its size is fixed. The stack size 
can be configured by the operating system or the user, and it is not dynamically adjusted at runtime based on the program's needs. 

1.7 One of the main advantages of dynamic memory allocation (using functions like malloc) 
over stack allocation is the ability to allocate variables of runtime-determined sizes. -> True
- This flexibility allows for the creation of data structures and arrays whose sizes are not known until the program is executed. 
For example, when you need to allocate an array of integers where the number of elements (n) is determined at runtime, you can use 
malloc to allocate the required memory dynamically. This is particularly useful in scenarios where the size of the data structure is 
not fixed and can change based on user input or other runtime conditions.

1.8 Repeated allocations and deallocations using malloc and free can lead to heap 
fragmentation, which can reduce the available memory for future allocations. -> True
- Heap fragmentation occurs when memory is allocated and then freed, leaving behind "holes" of unused memory. Over time, these holes can 
become scattered throughout the heap, making it difficult to find a contiguous block of memory large enough to satisfy a new allocation request.

1.9 Memory allocated on the stack within a function is automatically deallocated when the function exits, making manual deallocation unnecessary. -> True
- This automatic deallocation is part of the stack's operation, where memory for automatic variables is allocated when they come into scope (i.e., when a 
function or method runs) and is automatically deallocated when they go out of scope (when the function or method ends). This behavior ensures that 
programs deallocate automatic variables in the reverse order of their allocation, matching the stack's LIFO (Last In, First Out) principle

1.10 Due to memory constraints and the unpredictability of dynamic memory allocation, many embedded systems avoid or minimize the use of the heap. -> True
- Dynamic memory allocation (DMA) in embedded systems can lead to various challenges, including memory fragmentation, non-deterministic behavior, memory 
leaks, limited heap size, fragmented code space, memory management overhead, and lack of memory safety guarantees.

1.11 Memory fragmentation is not a concern in embedded systems due to their limited functionality and simpler memory management. -> False
- Embedded systems often operate with stringent memory constraints, including hardware limitations, cost considerations, power consumption, 
and physical size constraints. 

1.12 It's common for embedded systems, especially safety-critical ones, to use static memory 
allocation for all data to ensure predictability  and to avoid runtime memory allocation failures -> True
- Static memory allocation provides deterministic behavior, which is crucial for safety-critical applications where predictability and 
reliability are paramount. By avoiding dynamic memory allocation, embedded systems can prevent issues such as memory fragmentation, heap memory 
exhaustion, premature deallocation/dangling pointers, and lost updates and stale references, which are associated with dynamic memory allocation failures.

1.13 One of the main reasons embedded systems might avoid heap allocation is to maintain
deterministic behavior, ensuring operations complete in a predictable amount of time. -> True
- This is particularly important in safety-critical applications where predictability and reliability are paramount.